{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","App","state","isOpened","visibleGoods","startGoods","setState","reversedGoods","reverse","sortByABCGoods","sort","good1","good2","localeCompare","sortByGoodsLength","length","resetGoods","this","className","type","onClick","forceUpdate","map","good","React","Component","ReactDOM","render","document","getElementById"],"mappings":"4OAQMA,EAA4B,CAChC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,E,4MACJC,MAAe,CACbC,UAAU,EACVC,aAAa,GAAD,OAAMJ,I,EAGpBK,WAAa,WACX,EAAKC,SAAS,CACZH,UAAU,K,EAIdI,cAAgB,WACd,EAAKD,UAAS,SAAAJ,GACZA,EAAME,aAAaI,c,EAIvBC,eAAiB,WACf,EAAKH,UAAS,SAAAJ,GACZA,EAAME,aAAaM,MAAK,SAACC,EAAOC,GAC9B,OAAOD,EAAME,cAAcD,U,EAKjCE,kBAAoB,WAClB,EAAKR,UAAS,SAAAJ,GACZA,EAAME,aAAaM,MAAK,SAACC,EAAOC,GAC9B,OAAQD,EAAMI,OAASH,EAAMG,c,EAKnCC,WAAa,WACX,EAAKV,UAAS,iBAAO,CACnBF,aAAa,GAAD,OAAMJ,Q,4CAItB,WAAU,IAAD,OACP,EAAmCiB,KAAKf,MAAhCC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAElB,OACE,sBAAKc,UAAU,MAAf,UACE,wCAEEf,GAEA,wBACEgB,KAAK,SACLC,QAAS,WACP,EAAKf,cAHT,mBAUDF,GAEC,wBACEgB,KAAK,SACLC,QAAS,WACP,EAAKb,gBACL,EAAKc,eAJT,qBAWDlB,GAEC,wBACEgB,KAAK,SACLC,QAAS,WACP,EAAKX,iBACL,EAAKY,eAJT,iCAWDlB,GAEC,wBACEgB,KAAK,SACLC,QAAS,WACP,EAAKN,oBACL,EAAKO,eAJT,4BAWDlB,GAEC,wBACEgB,KAAK,SACLC,QAAS,WACP,EAAKJ,aACL,EAAKK,eAJT,mBAWF,6BACGlB,GAAYC,EAAakB,KAAI,SAACC,GAC7B,OACE,6BACGA,GADMA,e,GAlHLC,IAAMC,WA6HTxB,IC/IfyB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d22795a0.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\ntype State = {\n  isOpened: boolean,\n  visibleGoods: string[],\n};\n\nconst goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    isOpened: false,\n    visibleGoods: [...goodsFromServer],\n  };\n\n  startGoods = () => {\n    this.setState({\n      isOpened: true,\n    });\n  };\n\n  reversedGoods = () => {\n    this.setState(state => {\n      state.visibleGoods.reverse();\n    });\n  };\n\n  sortByABCGoods = () => {\n    this.setState(state => {\n      state.visibleGoods.sort((good1, good2) => {\n        return good1.localeCompare(good2);\n      });\n    });\n  };\n\n  sortByGoodsLength = () => {\n    this.setState(state => {\n      state.visibleGoods.sort((good1, good2) => {\n        return (good1.length - good2.length);\n      });\n    });\n  };\n\n  resetGoods = () => {\n    this.setState(() => ({\n      visibleGoods: [...goodsFromServer],\n    }));\n  };\n\n  render() {\n    const { isOpened, visibleGoods } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>Goods</h1>\n\n        {!isOpened\n        && (\n          <button\n            type=\"button\"\n            onClick={() => {\n              this.startGoods();\n            }}\n          >\n            Start\n          </button>\n        )}\n\n        {isOpened\n        && (\n          <button\n            type=\"button\"\n            onClick={() => {\n              this.reversedGoods();\n              this.forceUpdate();\n            }}\n          >\n            Reverse\n          </button>\n        )}\n\n        {isOpened\n        && (\n          <button\n            type=\"button\"\n            onClick={() => {\n              this.sortByABCGoods();\n              this.forceUpdate();\n            }}\n          >\n            Sort alphabetically\n          </button>\n        )}\n\n        {isOpened\n        && (\n          <button\n            type=\"button\"\n            onClick={() => {\n              this.sortByGoodsLength();\n              this.forceUpdate();\n            }}\n          >\n            Sort by length\n          </button>\n        )}\n\n        {isOpened\n        && (\n          <button\n            type=\"button\"\n            onClick={() => {\n              this.resetGoods();\n              this.forceUpdate();\n            }}\n          >\n            Reset\n          </button>\n        )}\n\n        <ul>\n          {isOpened && visibleGoods.map((good) => {\n            return (\n              <li key={good}>\n                {good}\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}